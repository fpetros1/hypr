# ----- Configuration -----
set icons
set shell zsh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set info size
set preview true
#set previewer ~/.config/lf/lf_kitty_preview
#set cleaner ~/.config/lf/lf_kitty_clean
#set previewer ctpv
#set cleaner ctpvclear
#&ctpv -s $id
#&ctpvquit $id
#cmd on-quit $stpvimg --end $id
set sixel true
set previewer ~/.config/lf/lf_sixel_preview
#set rulerfmt "%a  |%p  |\033[7;31m %m \033[0m  |\033[7;33m %c \033[0m  |\033[7;35m %s \033[0m  |\033[7;34m %f \033[0m  |%i/%t"
set selectfmt "48;2;118;148;106"
set copyfmt "48;2;220;165;97"
set cutfmt "48;2;195;64;67"
set rulerfmt "F: %f | P: %a | S: %s | C: %c | D: %m | %i/%t"


# ----- Functions -----
cmd gohome ${{
	set -f
	lf -remote "send $id cd '$HOME'"
}}

cmd gomedia ${{
	set -f
	lf -remote "send $id cd '/run/media/$USER'"
}}

cmd dragdrop ${{
	set -f
	FILES=$(echo "$fx" | xargs-escaped)
	$SHELL -c "dragon-drop --all --and-exit $FILES"
}}

cmd pasteclip %{{
	set -f
	FILETYPE=$(wl-paste --list-types)
	echo " Paste the file from clipboard($FILETYPE): " && read TARGET
	wl-paste > "$TARGET"
}}

cmd cpclip ${{
	set -f
	if [[ -z "$fs" ]]; then
		wl-copy < "$f"
	fi
}}

cmd mkfile %{{
	set -f
	echo " Create a new file (Folders ends with '/'): " && read TARGET
	CREATED=$(mkfile $TARGET -p)
	echo ""
	if [[ ! "$CREATED" == "." ]]; then
		echo " Directory created, do you wish to move to it? [y/N]: " && read MOVE
		if [[ "$MOVE" == "y" ]]; then
			lf -remote "send $id cd '$CREATED'"
		fi
	fi
}}

cmd delete ${{
	set -f
	FILES=$(echo "$fx" | xargs-escaped)
	echo $FILES
	$SHELL -c "rm -rf $FILES"
}}

cmd extract ${{
    set -f
	SELECTION=$(lf -command 'set dironly' -last-dir-path /dev/stdout)	
	FULL_PATH="${SELECTION}"

    TYPE=$(file -Lb --mime-type "$f")

    case $TYPE in
        application/gzip) tar -xzvf "$f" -C "$FULL_PATH";;
        application/zip) unzip "$f" -d "$FULL_PATH";;
        application/x-rar*) unrar x "$f" "$FULL_PATH";;
        application/x-7z*) 7z x "$f" -o"${FULL_PATH}";;
        *) lf -remote "send $id printError '$TYPE not supported for extraction!'";;
    esac

	lf -remote "send $id complete-extraction '$SELECTION'"
}}

cmd complete-extraction %{{
	TARGET="$1"
	echo " Extracted to: '$TARGET'. Go to directory? [y/n] " && read ANSWER

	if [[ "$ANSWER" == "y" ]]; then
		lf -remote "send $id cd '$TARGET'"
		echo ""
	fi
}}

cmd tar ${{
    set -f
	if [ -z "$fs" ]; then
        echo "$f"
        tar -zcvf "$f.tar.gz" -C $(dirname "$f") $(basename "$f") 
    else
        FILES=$(echo $fs | xargs-map basename)
        FIRST=$(echo "$FILES" | awk '{print $1;}')
        DIR=$(dirname "$FIRST")
		ARCHIVE="${FIRST}.tar.gz"
		$SHELL -c "tar -zcvf $ARCHIVE -C $DIR $FILES"
    fi
}}

cmd test ${{
	set -f
	echo $SELECTION
}}

cmd printError :{{
    echo "\033[31m $1"
}}

cmd refresh %{{
    set -pwd
    lf -remote "send $id cd '$PWD'"
}}

cmd harpoonAdd %{{
    set -pwd
    RESULT=$(harpoon-dir add "$PWD")

    if [[ ! -z "$RESULT" ]]; then
        lf -remote "send $id echoerr '$RESULT'"
        exit
    fi

    lf -remote "send $id echo 'Harpoon added. $(harpoon-dir length) harpoons in total'"
}}

cmd harpoonNext %{{
    set -f  

    send_no_harpoons_available() {
        lf -remote "send $id echoerr 'No Harpoons available!'"
    }

    send_and_print_harpoon() {
        lf -remote "send $id cd '$1'"
        lf -remote "send $id echo '$(bc <<< "$(harpoon-dir current_index) + 1") - $1'"
    }

    NEXT=$(harpoon-dir next)

    if [[ -z "$NEXT" ]]; then
        send_no_harpoons_available
        exit
    fi

    send_and_print_harpoon "$NEXT"
}}

cmd harpoonPrevious %{{
    set -f  

    send_no_harpoons_available() {
        lf -remote "send $id echoerr 'No Harpoons available!'"
    }

    send_and_print_harpoon() {
        lf -remote "send $id cd '$1'"
        lf -remote "send $id echo '$(bc <<< "$(harpoon-dir current_index) + 1") - $1'"
    }

    PREVIOUS=$(harpoon-dir previous)

    if [[ -z "$PREVIOUS" ]]; then
        send_no_harpoons_available
        exit
    fi

    send_and_print_harpoon "$PREVIOUS"
}}

cmd harpoonRemove ${{
    trap "command clear && exit" SIGINT EXIT ERR

    HARPOONS=$(harpoon-dir | enumerate)

    if [[ -z "$HARPOONS" ]]; then
        lf -remote "send $id echoerr 'No Harpoons available!'"
        exit
    fi

    command clear
    echo -e "Available Harpoons: \n"
    echo "$HARPOONS"

    echo -ne "\nChoose a Harpoon to remove[Abort]: " && read SELECTION

    if [[ -z "$SELECTION" ]]; then
        lf -remote "send $id echoerr 'Aborted'"
        exit
    fi

    COUNT=$(echo "$HARPOONS" | wc -l)

    if [[ "$SELECTION" -gt "$COUNT" ]] || [[ "$SELECTION" -lt 1 ]]; then
        lf -remote "send $id echoerr 'Invalid Selection'"
        exit
    fi

    HARPOON=$(echo "$HARPOONS" | grep "^$SELECTION - " | cut -d '-' -f2- | xargs)
    
    harpoon-dir remove "$HARPOON"
    lf -remote "send $id echo 'Harpoon Removed!'" 
}}

cmd harpoonReset %{{
    harpoon-dir clear
    lf -remote "send $id echo 'Harpoon Cleared'"
}}

cmd harpoonList ${{
    trap "command clear && exit" SIGINT EXIT ERR
    command clear
   
    echo -e "Harpoons: \n"
    harpoon-dir | enumerate
    pause
}}

cmd zip ${{
    set -f
	if [ -z "$fs" ]; then
        zip -r "$f.zip" $(basename $f)
    else
        FILES=$(echo $fs | xargs-map basename)
		ARCHIVE=$(echo "$FILES" | awk '{print $1;}').zip
		$SHELL -c "zip -r $ARCHIVE $FILES"
    fi
}}

cmd 7z ${{
    set -f
	if [ -z "$fs" ]; then
        7z a "$f.7z" $(basename $f)
    else
        FILES=$(echo $fs | xargs-map basename)
		ARCHIVE=$(echo "$FILES" | awk '{print $1;}').zip
		$SHELL -c "7z a $ARCHIVE $FILES"
    fi
}}

cmd default-application ${{
	set -f
	if [ -z "$fs" ]; then
		FILETYPE=$(xdg-mime query filetype "$f")
		APP=$({command ls /usr/share/applications/ & command ls $HOME/.local/share/applications} | sort -u | fzf)
		xdg-mime default "$APP" "$FILETYPE"
	fi
}}


# ----- Mappings -----

# General
map o open
map <enter> shell
map a mkfile
map DD delete
map R refresh

# Archives
map xe extract
map xt tar
map xz zip
map x7 7z

# Bookmark/Harpoon
map ba harpoonAdd
map bd harpoonRemove
map bc harpoonReset
map bl harpoonList
map <c-j> harpoonNext
map <c-k> harpoonPrevious

# Commands
map gh gohome
map gm gomedia
map gp pasteclip
map gc cpclip
map gdd dragdrop
map gda default-application

