# ----- Configuration -----
set icons
set shell zsh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set preview true
set previewer ~/.config/lf/lf_kitty_preview
set cleaner ~/.config/lf/lf_kitty_clean
#set rulerfmt "%a  |%p  |\033[7;31m %m \033[0m  |\033[7;33m %c \033[0m  |\033[7;35m %s \033[0m  |\033[7;34m %f \033[0m  |%i/%t"
set selectfmt "48;2;118;148;106"
set copyfmt "48;2;220;165;97"
set cutfmt "48;2;195;64;67"
set rulerfmt "F: %f | P: %a | S: %s | C: %c | D: %m | %i/%t"


# ----- Functions -----
cmd gohome ${{
	set -f
	lf -remote "send $id cd '$HOME'"
}}

cmd gomedia ${{
	set -f
	lf -remote "send $id cd '/run/media/$USER'"
}}

cmd dragdrop ${{
	set -f
	FILES=$(echo "$fx" | xargs-escaped)
	$SHELL -c "dragon-drop --all --and-exit $FILES"
}}

cmd pasteclip %{{
	set -f
	FILETYPE=$(wl-paste --list-types)
	echo " Paste the file from clipboard($FILETYPE): " && read TARGET
	wl-paste > "$TARGET"
}}

cmd cpclip ${{
	set -f
	if [[ -z "$fs" ]]; then
		wl-copy < "$f"
	fi
}}

cmd mkfile %{{
	set -f
	echo " Create a new file (Folders ends with '/'): " && read TARGET
	CREATED=$(mkfile $TARGET -p)
	echo ""
	if [[ ! "$CREATED" == "." ]]; then
		echo " Directory created, do you wish to move to it? [y/N]: " && read MOVE
		if [[ "$MOVE" == "y" ]]; then
			lf -remote "send $id cd '$CREATED'"
		fi
	fi
}}

cmd delete ${{
	set -f
	FILES=$(echo "$fx" | xargs-escaped)
	echo $FILES
	$SHELL -c "rm -rf $FILES"
}}

cmd extract ${{
    set -f
	SELECTION=$(lf -command 'set dironly' -last-dir-path /dev/stdout)	
	FULL_PATH="${SELECTION}"

    TYPE=$(file -Lb --mime-type "$f")

    case $TYPE in
        application/gzip) tar -xzvf "$f" -C "$FULL_PATH";;
        application/zip) unzip "$f" -d "$FULL_PATH";;
        application/x-rar*) unrar x "$f" "$FULL_PATH";;
        application/x-7z*) 7z x "$f" -o"${FULL_PATH}";;
        *) lf -remote "send $id printError '$TYPE not supported for extraction!'";;
    esac

	lf -remote "send $id complete-extraction '$SELECTION'"
}}

cmd complete-extraction %{{
	TARGET="$1"
	echo " Extracted to: '$TARGET'. Go to directory? [y/n] " && read ANSWER

	if [[ "$ANSWER" == "y" ]]; then
		lf -remote "send $id cd '$TARGET'"
		echo ""
	fi
}}

cmd tar ${{
    set -f
	if [ -z "$fs" ]; then
        echo "$f"
        tar -zcvf "$f.tar.gz" -C $(dirname "$f") $(basename "$f") 
    else
        FILES=$(echo $fs | xargs-map basename)
        FIRST=$(echo "$FILES" | awk '{print $1;}')
        DIR=$(dirname "$FIRST")
		ARCHIVE="${FIRST}.tar.gz"
		$SHELL -c "tar -zcvf $ARCHIVE -C $DIR $FILES"
    fi
}}

cmd test ${{
	set -f
	echo $SELECTION
}}

cmd printError %{{
    echo "\033[31m $1"
}}

cmd harpoonSet %{{
    set -pwd

    HARPOON_FILE="$XDG_RUNTIME_DIR/harpoon.$USER.dirs"

    if [[ ! -f "$HARPOON_FILE" ]]; then
        touch "$HARPOON_FILE"
    fi

    HARPOON_TARGET="$PWD"
    if [[ -z $(cat "$HARPOON_FILE" | grep "^[1-9])${HARPOON_TARGET}$") ]]; then
        COUNT=$(cat "$HARPOON_FILE" | wc -l)
        echo "$(bc <<< "$COUNT+1"))$HARPOON_TARGET" | tee -a "$HARPOON_FILE"
        TOTAL=$(cat "$HARPOON_FILE" | tail -n 1 | cut -d ')' -f1)
        lf -remote "send $id echo 'Added $HARPOON_TARGET to the Harpoon List. $TOTAL directories in the list.'"
    fi
}}

cmd harpoonGoFwd ${{
    set -f  
    HARPOON_FILE="$XDG_RUNTIME_DIR/harpoon.$USER.dirs"
    CURRENT_HARPOON_FILE="$XDG_RUNTIME_DIR/$USER.harpoon.current"

    if [[ ! -f "$CURRENT_HARPOON_FILE" ]]; then
        echo "0" > "$CURRENT_HARPOON_FILE"
    fi

    TOTAL_HARPOON=$(cat "$HARPOON_FILE" | wc -l)

    if [[ -z "$TOTAL_HARPOON" ]] || [[ "$TOTAL_HARPOON" == "0" ]]; then
        lf -remote "send $id echo 'No Harpoons available!'"
        exit
    fi

    send_and_print_harpoon() {
        echo "$2" | cut -d ')' -f1 > "$CURRENT_HARPOON_FILE"
        lf -remote "send $id cd '$1'"
        lf -remote "send $id echo '$2'"
    }

    if [[ "$TOTAL_HARPOON" == "1" ]]; then
        LAST_HARPOON_LINE=$(cat "$HARPOON_FILE" | tail -n 1)
        HARPOON_DIR=$(echo "$LAST_HARPOON_LINE" | cut -d ')' -f2-)

        if [[ ! "$PWD" == "$HARPOON_DIR" ]]; then
            send_and_print_harpoon "$HARPOON_DIR" "$LAST_HARPOON_LINE"
        fi
        exit
    fi

    CURRENT_HARPOON=$(cat "$CURRENT_HARPOON_FILE")
    TARGET_HARPOON=$(bc <<< "$CURRENT_HARPOON+1")
    
    if [[ "$TARGET_HARPOON" -gt "$TOTAL_HARPOON" ]]; then
        FIRST_HARPOON_LINE=$(cat "$HARPOON_FILE" | head -n 1)
        FIRST_HARPOON_DIR=$(echo "$FIRST_HARPOON_LINE" | cut -d ')' -f2-)
        send_and_print_harpoon "$FIRST_HARPOON_DIR" "$FIRST_HARPOON_LINE"
        exit
    fi

    TARGET_HARPOON_LINE=$(cat "$HARPOON_FILE" | grep "^$TARGET_HARPOON)")
    TARGET_HARPOON_DIR=$(echo "$TARGET_HARPOON_LINE" | cut -d ')' -f2)
    send_and_print_harpoon "$TARGET_HARPOON_DIR" "$TARGET_HARPOON_LINE"
}}

cmd harpoonGoBck ${{
    set -f  
    HARPOON_FILE="$XDG_RUNTIME_DIR/harpoon.$USER.dirs"
    CURRENT_HARPOON_FILE="$XDG_RUNTIME_DIR/$USER.harpoon.current"

    if [[ ! -f "$CURRENT_HARPOON_FILE" ]]; then
        echo "0" > "$CURRENT_HARPOON_FILE"
    fi

    TOTAL_HARPOON=$(cat "$HARPOON_FILE" | wc -l)

    if [[ -z "$TOTAL_HARPOON" ]] || [[ "$TOTAL_HARPOON" == "0" ]]; then
        lf -remote "send $id echo 'No Harpoons available!'"
        exit
    fi

    send_and_print_harpoon() {
        echo "$2" | cut -d ')' -f1 > "$CURRENT_HARPOON_FILE"
        lf -remote "send $id cd '$1'"
        lf -remote "send $id echo '$2'"
    }

    if [[ "$TOTAL_HARPOON" == "1" ]]; then
        LAST_HARPOON_LINE=$(cat "$HARPOON_FILE" | tail -n 1)
        HARPOON_DIR=$(echo "$LAST_HARPOON_LINE" | cut -d ')' -f2-)

        if [[ ! "$PWD" == "$HARPOON_DIR" ]]; then
            send_and_print_harpoon "$HARPOON_DIR" "$LAST_HARPOON_LINE"
        fi
        exit
    fi

    CURRENT_HARPOON=$(cat "$CURRENT_HARPOON_FILE")
    TARGET_HARPOON=$(bc <<< "$CURRENT_HARPOON-1")
    
    if [[ "$TARGET_HARPOON" -lt "1" ]]; then
        LAST_HARPOON_LINE=$(cat "$HARPOON_FILE" | tail -n 1)
        LAST_HARPOON_DIR=$(echo "$LAST_HARPOON_LINE" | cut -d ')' -f2-)
        send_and_print_harpoon "$LAST_HARPOON_DIR" "$LAST_HARPOON_LINE"
        exit
    fi

    TARGET_HARPOON_LINE=$(cat "$HARPOON_FILE" | grep "^$TARGET_HARPOON)")
    TARGET_HARPOON_DIR=$(echo "$TARGET_HARPOON_LINE" | cut -d ')' -f2)
    send_and_print_harpoon "$TARGET_HARPOON_DIR" "$TARGET_HARPOON_LINE"
}}

cmd harpoonClear ${{
    set -f
    HARPOON_FILE="$XDG_RUNTIME_DIR/harpoon.$USER.dirs"
    rm -f "$HARPOON_FILE"
    lf -remote "send $id echo 'Harpoon Cleared'"
}}

cmd zip ${{
    set -f
	if [ -z "$fs" ]; then
        zip -r "$f.zip" $(basename $f)
    else
        FILES=$(echo $fs | xargs-map basename)
		ARCHIVE=$(echo "$FILES" | awk '{print $1;}').zip
		$SHELL -c "zip -r $ARCHIVE $FILES"
    fi
}}

cmd 7z ${{
    set -f
	if [ -z "$fs" ]; then
        7z a "$f.7z" $(basename $f)
    else
        FILES=$(echo $fs | xargs-map basename)
		ARCHIVE=$(echo "$FILES" | awk '{print $1;}').zip
		$SHELL -c "7z a $ARCHIVE $FILES"
    fi
}}

cmd default-application ${{
	set -f
	if [ -z "$fs" ]; then
		FILETYPE=$(xdg-mime query filetype "$f")
		APP=$({command ls /usr/share/applications/ & command ls $HOME/.local/share/applications} | sort -u | fzf)
		xdg-mime default "$APP" "$FILETYPE"
	fi
}}

# ----- Mappings -----

# General
map o open
map <enter> shell
map a mkfile
map DD delete

# Archives
map xe extract
map xt tar
map xz zip
map x7 7z
map zHs harpoonSet
map <c-j> harpoonGoFwd
map <c-k> harpoonGoBck
map zHc harpoonClear

# Commands
map gh gohome
map gm gomedia
map gp pasteclip
map gc cpclip
map gdd dragdrop
map gda default-application

